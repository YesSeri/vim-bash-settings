" Vim with all enhancements
source $VIMRUNTIME/vimrc_example.vim

" Use the internal diff if available.
" Otherwise use the special 'diffexpr' for Windows.
if &diffopt !~# 'internal'
	set diffexpr=MyDiff()
endif
function MyDiff()
	let opt = '-a --binary '
	if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
	if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
	let arg1 = v:fname_in
	if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
	let arg1 = substitute(arg1, '!', '\!', 'g')
	let arg2 = v:fname_new
	if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
	let arg2 = substitute(arg2, '!', '\!', 'g')
	let arg3 = v:fname_out
	if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
	let arg3 = substitute(arg3, '!', '\!', 'g')
	if $VIMRUNTIME =~ ' '
		if &sh =~ '\<cmd'
			if empty(&shellxquote)
				let l:shxq_sav = ''
				set shellxquote&
			endif
			let cmd = '"' . $VIMRUNTIME . '\diff"'
		else
			let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
		endif
	else
		let cmd = $VIMRUNTIME . '\diff'
	endif
	let cmd = substitute(cmd, '!', '\!', 'g')
	silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
	if exists('l:shxq_sav')
		let &shellxquote=l:shxq_sav
	endif
endfunction


function! CustomSettings()
	" https://github.com/NLKNguyen/papercolor-theme
	colorscheme papercolor
	highlight CursorLine cterm=NONE
	" Stops buffers from needing to be saved everytime you switch.
	set hidden
	set visualbell
	set laststatus=2
	set cursorline
	set t_vb=
	set number
	set shell=powershell
	set shellcmdflag=-command
	set noexpandtab
	set tabstop=4
	set shiftwidth=4
	" # Folds
	" Folding by syntax
	set foldmethod=syntax
	" Folds always start fully open. 
	autocmd BufReadPost * silent! :%foldopen!
	" Open help on right side, with capital H
	cnoreabbrev h h
	cnoreabbrev H vert bo h
	
endfunction

function! CustomKeybindings()
	map <F1> :call DecreaseWindowSize()<CR>
	map <F2> :call IncreaseWindowSize()<CR>
	map <F5> :call RunFile()<CR>
	map <C-s> :write <CR>
	map <F10> :source $MYVIMRC<CR>
endfunction

function! CustomStatusline()

	let g:currentmode={
				\ 'n'  : 'NORMAL ',
				\ 'v'  : 'VISUAL ',
				\ 'V'  : 'V·Line ',
				\ "\<C-V>" : 'V·Block ',
				\ 'i'  : 'INSERT ',
				\ 'R'  : 'R ',
				\ 'Rv' : 'V·Replace ',
				\ 'c'  : 'Command ',
				\}

	set statusline=
	set statusline+=%#CursorColumn#
	set statusline+=dir:
	set statusline+=\ %f
	set statusline+=%m
	set statusline+=%=
	set statusline+=%#CursorColumn#
	set statusline+=%b:%B
	set statusline+=\ %y
	set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
	set statusline+=\[%{&fileformat}\]
	set statusline+=\ %p%%
	set statusline+=\ %l	  " Current line
	set statusline+=/	  " Separator
	set statusline+=%L	 " Total lines

endfunction

" Open a file in markdown, in firefox for preview. 
" Grip is required: https://github.com/joeyespo/grip
" pip install grip
function! RunFile()
	if (&ft=='md')
		let l:md_filepath = expand('%:p')
		":h		head (last path component removed)
		"let l:html_filepath = substitute(l:md_filepath, "*\zs.md", ".html", "")
		let l:html_filepath = expand('%:p:h') . '\output.html'
		execute '!grip ' . l:md_filepath . ' --export ' . l:html_filepath
		execute '!Start-Sleep 0.5 | start firefox ' . l:html_filepath
		execute '!rm ' . l:html_filepath
	elseif (&ft=='rust')
		execute '!clear | cargo run'
	else
		echo 'Not a valid file to run'
	endif

endfunction

function IncreaseWindowSize()
	"This means there is a vertical split
	if winwidth(0) != &columns
		vertical resize +5
	else
		resize +5
	endif
endfunction

function DecreaseWindowSize()
	"This means there is a vertical split
	if winwidth(0) != &columns
		vertical resize -5
	else
		resize -5
	endif
endfunction

function SetupVimPlug()
	call plug#begin('~/.vim/plugged')
	Plug 'neoclide/coc.nvim', {'branch': 'release'}
	"	 " Make sure you use single quotes
	"
	"	 " Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
	"	 Plug 'junegunn/vim-easy-align'
	"
	"	 " Any valid git URL is allowed
	"	 Plug 'https://github.com/junegunn/vim-github-dashboard.git'
	"
	"	 " Multiple Plug commands can be written in a single line using | separators
	"	 Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
	"
	"	 " On-demand loading
	"	 Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
	"	 Plug 'tpope/vim-fireplace', { 'for': 'clojure' }
	"
	"	 " Using a non-default branch
	"	 Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }
	"
	"	 " Using a tagged release; wildcard allowed (requires git 1.9.2 or above)
	"	 Plug 'fatih/vim-go', { 'tag': '*' }
	"
	"	 " Plugin options
	"	 Plug 'nsf/gocode', { 'tag': 'v.20150303', 'rtp': 'vim' }
	"
	"	 " Plugin outside ~/.vim/plugged with post-update hook
	"	 Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
	"
	"	 " Unmanaged plugin (manually installed and updated)
	"	 Plug '~/my-prototype-plugin'
	"
	"	 " Initialize plugin system
	call plug#end()
endfunction

function SetupCocVim()
	" May need for vim (not neovim) since coc.nvim calculate byte offset by count
	" utf-8 byte sequence.
	set encoding=utf-8
	" Some servers have issues with backup files, see #649.
	set nobackup
	set nowritebackup

	" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
	" delays and poor user experience.
	set updatetime=300

	" Always show the signcolumn, otherwise it would shift the text each time
	" diagnostics appear/become resolved.
	set signcolumn=yes

	" Use tab for trigger completion with characters ahead and navigate.
	" NOTE: There's always complete item selected by default, you may want to enable
	" no select by `"suggest.noselect": true` in your configuration file.
	" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
	" other plugin before putting this into your config.
	inoremap <silent><expr> <TAB>
				\ coc#pum#visible() ? coc#pum#next(1) :
				\ CheckBackspace() ? "\<Tab>" :
				\ coc#refresh()
	inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

	" Make <CR> to accept selected completion item or notify coc.nvim to format
	" <C-g>u breaks current undo, please make your own choice.
	inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
				\: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

	function! CheckBackspace() abort
		let col = col('.') - 1
		return !col || getline('.')[col - 1]	=~# '\s'
	endfunction

	" Use <c-space> to trigger completion.
	if has('nvim')
		inoremap <silent><expr> <c-space> coc#refresh()
	else
		inoremap <silent><expr> <c-@> coc#refresh()
	endif

	" Use `[g` and `]g` to navigate diagnostics
	" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
	nmap <silent> [g <Plug>(coc-diagnostic-prev)
	nmap <silent> ]g <Plug>(coc-diagnostic-next)

	" GoTo code navigation.
	nmap <silent> gd <Plug>(coc-definition)
	nmap <silent> gy <Plug>(coc-type-definition)
	nmap <silent> gi <Plug>(coc-implementation)
	nmap <silent> gr <Plug>(coc-references)

	" Use K to show documentation in preview window.
	nnoremap <silent> K :call ShowDocumentation()<CR>

	function! ShowDocumentation()
		if CocAction('hasProvider', 'hover')
			call CocActionAsync('doHover')
		else
			call feedkeys('K', 'in')
		endif
	endfunction

	" Highlight the symbol and its references when holding the cursor.
	autocmd CursorHold * silent call CocActionAsync('highlight')

	" Symbol renaming.
	nmap <leader>rn <Plug>(coc-rename)

	" Formatting selected code.
	xmap <leader>f	<Plug>(coc-format-selected)
	nmap <leader>f	<Plug>(coc-format-selected)

	augroup mygroup
		autocmd!
		" Setup formatexpr specified filetype(s).
		autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
		" Update signature help on jump placeholder.
		autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
	augroup end

	" Applying codeAction to the selected region.
	" Example: `<leader>aap` for current paragraph
	xmap <leader>a	<Plug>(coc-codeaction-selected)
	nmap <leader>a	<Plug>(coc-codeaction-selected)

	" Remap keys for applying codeAction to the current buffer.
	nmap <leader>ac	<Plug>(coc-codeaction)
	" Apply AutoFix to problem on the current line.
	nmap <leader>qf	<Plug>(coc-fix-current)

	" Run the Code Lens action on the current line.
	nmap <leader>cl	<Plug>(coc-codelens-action)

	" Map function and class text objects
	" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
	xmap if <Plug>(coc-funcobj-i)
	omap if <Plug>(coc-funcobj-i)
	xmap af <Plug>(coc-funcobj-a)
	omap af <Plug>(coc-funcobj-a)
	xmap ic <Plug>(coc-classobj-i)
	omap ic <Plug>(coc-classobj-i)
	xmap ac <Plug>(coc-classobj-a)
	omap ac <Plug>(coc-classobj-a)

	" Remap <C-f> and <C-b> for scroll float windows/popups.
	if has('nvim-0.4.0') || has('patch-8.2.0750')
		nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
		nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
		inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
		inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
		vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
		vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
	endif

	" Use CTRL-S for selections ranges.
	" Requires 'textDocument/selectionRange' support of language server.
	nmap <silent> <C-s> <Plug>(coc-range-select)
	xmap <silent> <C-s> <Plug>(coc-range-select)

	" Add `:Format` command to format current buffer.
	command! -nargs=0 Format :call CocActionAsync('format')

	" Add `:Fold` command to fold current buffer.
	command! -nargs=? Fold :call	   CocAction('fold', <f-args>)

	" Add `:OR` command for organize imports of the current buffer.
	command! -nargs=0 OR	 :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

	" Add (Neo)Vim's native statusline support.
	" NOTE: Please see `:h coc-status` for integrations with external plugins that
	" provide custom statusline: lightline.vim, vim-airline.
	set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

	" Mappings for CoCList
	" Show all diagnostics.
	nnoremap <silent><nowait> <space>a	:<C-u>CocList diagnostics<cr>
	" Manage extensions.
	nnoremap <silent><nowait> <space>e	:<C-u>CocList extensions<cr>
	" Show commands.
	nnoremap <silent><nowait> <space>c	:<C-u>CocList commands<cr>
	" Find symbol of current document.
	nnoremap <silent><nowait> <space>o	:<C-u>CocList outline<cr>
	" Search workspace symbols.
	nnoremap <silent><nowait> <space>s	:<C-u>CocList -I symbols<cr>
	" Do default action for next item.
	nnoremap <silent><nowait> <space>j	:<C-u>CocNext<CR>
	" Do default action for previous item.
	nnoremap <silent><nowait> <space>k	:<C-u>CocPrev<CR>
	" Resume latest coc list.
	nnoremap <silent><nowait> <space>p	:<C-u>CocListResume<CR>
endfunction

call SetupCocVim()
call SetupVimPlug()
call CustomSettings()
call CustomKeybindings()
call CustomStatusline()
